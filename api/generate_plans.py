import json
from fastapi import APIRouter, Depends, Request, HTTPException
from sqlalchemy.orm import Session
from db.session import get_db
from services.meal_plan_ai import generate_meal_plan
from db.models.food import FoodItem
from db.models.plan import Plan, PlanItem
from schemas.plan import GeneratedPlanSchema
from utils import get_day_name

router = APIRouter(
    prefix="/v1/generate-plan",
    tags=["Generate AI Plan"]
)

@router.post("/")
def auto_generate_plan(request: Request, days: int = 1, db: Session = Depends(get_db)):
    current_user = request.state.user

    foods = db.query(FoodItem).all()
    food_list = [
        {
            "id": f.id,
            "name": f.name,
            "calories": float(f.calories),
            "protein": float(f.protein),
            "carbs": float(f.carbs),
            "fats": float(f.fats),
            "reference_amount": float(f.reference_amount),
            "reference_unit": f.reference_unit
        }
        for f in foods
    ]

    user_profile = {
        "dietary_prefs": current_user.dietary_prefs,
        "goals": current_user.goals,
        "bmi": current_user.bmi
    }

    raw_plan = generate_meal_plan(user_profile, food_list, days)

    if isinstance(raw_plan, GeneratedPlanSchema):
        plan_data = raw_plan
    else:
        try:
            plan_data = GeneratedPlanSchema.model_validate(raw_plan)
        except Exception as e:
            raise HTTPException(status_code=422, detail=f"AI response not in expected format: {e}")
        
    day_name = get_day_name(days)
    existing_plan = (
        db.query(Plan)
        .filter(
            Plan.user_id == current_user.id,
            Plan.name == f"{day_name} AI Meal Plan"
        )
        .first()
    )

    if existing_plan:
        db.query(PlanItem).filter(PlanItem.plan_id == existing_plan.id).delete()
        existing_plan.description = "Updated by AI"
        plan_record = existing_plan
    else:
        # Create new plan row
        plan_record = Plan(
            user_id=current_user.id,
            name=f"{day_name} AI Meal Plan",
            description="Generated by AI"
        )
        db.add(plan_record)
        db.commit()
        db.refresh(plan_record)

    for meal in plan_data.meals:
        for item in meal.items:
            db.add(PlanItem(
                plan_id=plan_record.id,
                food_id=item.food_id,
                quantity=item.quantity,
                unit=item.unit,
                meal_name=meal.meal,
                day=plan_data.day
            ))
    db.commit()

    plan_dict = plan_data.model_dump()
    plan_dict = json.loads(json.dumps(plan_dict, default=float))

    return {
        "message": "AI meal plan generated successfully",
        "plan_id": plan_record.id,
        "plan": plan_dict
    }
